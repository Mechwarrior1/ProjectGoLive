name: CI setup for Go #Name the workflow
on: # on event keyword
  push: 
    branches: [main] #identifying branch
  pull_request:
    branches: [main] #activate on pull as well
    

jobs: #job to execute on event
  my-job: # can be any identifier, jobs1, build1 etc
    name: My Job
    runs-on: ubuntu-latest # specify os in virtual machine
    steps:
        
    - name: Setup Go environment
      uses: actions/setup-go@v2.1.3
      with:
        # The Go version to download (if necessary) and use. Supports semver spec and ranges.
        go-version: 1.16.5 # optional
    - name: show Go version
      run: go version #verify Go is installed and show Go version
      
    - name: Checkout our codes #bring repo code to virtual environment
      uses: actions/checkout@v2
      
    - name: Checkout private repo remotely
      uses: actions/checkout@v2
      with:
        repository: Mechwarrior1/ProjectGoLive #hidden repo i am trying to access
        path: virtualRepoFolder #folder to save to in my virtual env
        
    - name: Install dependencies for GO and test
      run: |
        go get github.com/franela/goblin #go packages
        go get github.com/gorilla/mux 
        go get gopkg.in/check.v1
        go get golang.org/x/crypto/bcrypt
        go get github.com/satori/go.uuid
        go get github.com/tebeka/go2xunit
        cd api_server
        go test -v ./... -coverpkg ./... -coverprofile=profile.cov ./...
        go test -v ./... -coverpkg ./... -coverprofile=profile.cov ./... | go2xunit > report_api_test.xml
        go tool cover -html=profile.cov -o cover.html | go2xunit > report_api_coverage.html

        ls #verify report is created
        
        cd ..
        cd client
        go test -v ./... -coverpkg ./... -coverprofile=profile.cov ./...
        go test -v ./... -coverpkg ./... -coverprofile=profile.cov ./... | go2xunit > report_client_test.xml #run test again and output as report.xml
        go tool cover -html=profile.cov -o cover.html | go2xunit > report_client_coverage.html

    - name: Publish unit test result
      uses: EnricoMi/publish-unit-test-result-action@v1 #checkout unit test reporting 
      if: always() #always happen
      with: 
        files: |
          api_server/report_api_test.xml #uses a file created earlier
          api_server/report_api_coverage.html #uses a file created earlier
          client/report_client_test.xml #uses a file created earlier
          client/report_client_coverage.html #uses a file created earlier
        
    # - name: Publish unit test result
    #   uses: EnricoMi/publish-unit-test-result-action@v1 #checkout unit test reporting 
    #   if: always() #always happen
    #   with: 
    #     files: client/report2.xml #uses a file created earlier
        
    - if: ${{ success() }}
      name: Export report
      run: mkdir upload
      
    - name: Prepare documents
      run: |
        mv api_server/report.xml ./upload #move file to upload folder
        mv client/report2.xml ./upload #move file to upload folder
      
    - name: Prepare artifacts
      uses: actions/upload-artifact@v2
      with:
        name: assetDocument
        path: upload
    
    - name: Download Content
      uses: actions/download-artifact@v2
      with:
        name: assetDocument
      
    - if: ${{ failure() }}
      name: Create issues notifications
      uses: nashmaniac/create-issue-action@v1.1
      with:
        title: Build Failed
        token: ${{secrets.GITHUB_TOKEN}}
        assignees: ${{github.actor}}
        labels: worflow-failed
        body: Workflow failed for commit ${{github.sha}}
      
    - name: Notify on Discord.
      uses: fateyan/action-discord-notifier@v1
      with:
        message-title: New Commit Pushed
        webhook: ${{ secrets.DISCORD_HOOK }}
